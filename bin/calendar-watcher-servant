#!/usr/bin/ruby1.8
require 'rubygems'
require 'belphanior/servant/servant'
require 'belphanior/servant/calendar_watcher/calendar_watcher'
require 'sinatra'

# Watches an iCal-compatible calendar and---when a "tick" message is sent---
# checks for events having occurred between the previous tick and the new tick.
# Any events that have occurred are fired to a specified server.

servant_init

REQUIRED_VARIABLES = %q{
calendar url: The URL of the calendar that should be read.
servant url: The URL of the protocol for the target servant.
command: The command to send to the target servant.
}

if servant_config.get("calendar url") == nil or
    servant_config.get("servant url") == nil or
    servant_config.get("command") == nil then
  puts "Some required variables were missing."
  puts REQUIRED_VARIABLES
  exit true
end

add_role_description(
  {
    "name" => "timed",
    "description" => "A servant that can be remotely-triggered to perform some periodic action.",
    "commands" => [
                   {
                     "name" => "step",
                     "description" => "Execute the behavior of this servant.",
                     "arguments" => []
                   }
                 ]
  })

add_handler("step", "", "POST", "/step", "") {
  new_datetime = DateTime.now
  watcher = Belphanior::Servant::CalendarWatcher::CalendarWatcher.new(
    servant_config.get("calendar url"))
  puts "Retrieving events between #{settings.last_time} and #{new_datetime}"
  event_names = watcher.get_events_between_times(settings.last_time, new_datetime)
  set(:last_time, new_datetime)
  # TODO(mtomczak): Act on all watched events.
  puts event_names
}

get "/calendar" do
  new_datetime = DateTime.new
  watcher = Belphanior::Servant::CalendarWatcher::CalendarWatcher.new(
    servant_config.get("calendar url"))
  watcher.get_events_between_times(DateTime.parse("1/1/2012"), DateTime.parse("12/12/2012"))
end

set(:last_time, DateTime.now)
