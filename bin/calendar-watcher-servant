#!/usr/bin/ruby1.8
require 'rubygems'
require 'belphanior/servant_caller'
require 'belphanior/servant/servant'
require 'belphanior/servant/calendar_watcher/calendar_watcher'
require 'json'
require 'logger'
require 'net/http'
require 'uri'
require 'sinatra'

# Watches an iCal-compatible calendar and---when a "tick" message is sent---
# checks for events having occurred between the previous tick and the new tick.
# Any events that have occurred are fired to a specified server.

servant_init

REQUIRED_VARIABLES = %q{
calendar url: The URL of the calendar that should be read.
servant url: The URL of the protocol for the target servant.
}

if servant_config.get("calendar url") == nil or
    servant_config.get("servant url") == nil then
  puts "Some required variables were missing."
  puts REQUIRED_VARIABLES
  exit true
end

if servant_config.get("update seconds") == nil then
  servant_config.set("update seconds", 60)
end

add_role_description(
  {
    "name" => "timed",
    "description" => "A servant that can be remotely-triggered to perform some periodic action.",
    "commands" => [
                   {
                     "name" => "step",
                     "description" => "Execute the behavior of this servant.",
                     "arguments" => []
                   }
                 ]
  })

def build_role_hash(roles)
  role_hash = {}
  roles.each do |role|
    role_url = role["role_url"]
    if role_url.start_with? "/" then
      role_uri = URI(servant_config.get("servant url")) + role_url
    else
      role_uri = URI(role_url)
    end
    puts "Connect to #{role_uri}"
    role_code = JSON.parse(Net::HTTP.get_response(role_uri).body)
    role_hash[role_uri.to_s] = role_code
  end

  role_hash
end

def connect_to_servant
  # TODO(mtomczak): This should be refactored into common library code.
  protocol_uri = URI(servant_config.get("servant url") + "/protocol")
  puts "Connect to #{protocol_uri}"
  protocol = JSON.parse(Net::HTTP.get_response(protocol_uri).body)
  roles = build_role_hash(protocol["roles"])

  Belphanior::ServantCaller.new(
    Logger.new(STDOUT),
    servant_config.get("servant url"),
    protocol,
    roles)

end

def do_events(event_names)
  caller = connect_to_servant
  event_names.each do |event_name|
    caller.tell_by_name("commandable") do |servant|
      servant.do event_name
    end
  end
end

add_handler("step", "", "POST", "/step", "") {
  new_datetime = DateTime.now
  watcher = Belphanior::Servant::CalendarWatcher::CalendarWatcher.new(
    servant_config.get("calendar url"))
  puts "Retrieving events between #{settings.last_time} and #{new_datetime}"
  event_names = watcher.get_events_between_times(settings.last_time, new_datetime)
  set(:last_time, new_datetime)
  do_events event_names
}

# Test command: Tries to execute all operations between 1/1/2012 and 12/12/2012
get "/calendar" do
  new_datetime = DateTime.new
  watcher = Belphanior::Servant::CalendarWatcher::CalendarWatcher.new(
    servant_config.get("calendar url"))
  do_events (watcher.get_events_between_times(DateTime.parse("1/1/2012"), DateTime.parse("12/12/2012")))
end

set(:last_time, DateTime.now)

# Self-requesting thread that updates the calendar periodically.
tick_thread = Thread.new do
  while true
    http = Net::HTTP.new(servant_config.get("ip"), servant_config.get("port").to_i)
    begin
      request = Net::HTTP::Post.new("/step")
      request.body = ""
      http.request(request)
    rescue
    end
    sleep(servant_config.get("update seconds").to_i)
  end
end

